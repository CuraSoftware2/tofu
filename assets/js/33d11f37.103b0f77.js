"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1101],{4137:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},9066:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=r(7462),a=r(3366),o=(r(7294),r(4137)),i=["components"],l={id:"errors",title:"Error management"},s=void 0,p={unversionedId:"errors",id:"errors",title:"Error management",description:"Producing errors",source:"@site/../docs/errors.md",sourceDirName:".",slug:"/errors",permalink:"/docs/errors",draft:!1,tags:[],version:"current",lastUpdatedBy:"susliko",lastUpdatedAt:1589407182,formattedLastUpdatedAt:"May 13, 2020",frontMatter:{id:"errors",title:"Error management"},sidebar:"docs",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Forking and Racing",permalink:"/docs/fork"}},c={},d=[{value:"Producing errors",id:"producing-errors",level:2},{value:"Problem",id:"problem",level:3},{value:"Solution",id:"solution",level:3},{value:"Recovering from errors",id:"recovering-from-errors",level:2},{value:"Problem",id:"problem-1",level:3},{value:"Solution",id:"solution-1",level:3}],m={toc:d},u="wrapper";function f(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)(u,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"producing-errors"},"Producing errors"),(0,o.kt)("h3",{id:"problem"},"Problem"),(0,o.kt)("p",null,"One of the major issues of the MTL style is an error handling."),(0,o.kt)("p",null,"The weakest ",(0,o.kt)("a",{parentName:"p",href:"https://typelevel.org/cats/"},(0,o.kt)("inlineCode",{parentName:"a"},"Cats"))," typeclass, which enables operations with errors, is an\n",(0,o.kt)("a",{parentName:"p",href:"https://typelevel.org/cats/api/cats/ApplicativeError.html"},(0,o.kt)("inlineCode",{parentName:"a"},"ApplicativeError")),".\nIt brings a full ",(0,o.kt)("inlineCode",{parentName:"p"},"Applicative")," instance apart from error-related methods and\nthis means, that we are not allowed to have a few ",(0,o.kt)("inlineCode",{parentName:"p"},"FunctorRaise")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplicativeError")," instances in the scope, since\ntheir underlying ",(0,o.kt)("inlineCode",{parentName:"p"},"Functor"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"Applicative")," instances will come into conflict:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'    import cats._\n    case class ArithmeticError() extends Throwable\n    case class ParseError() extends Throwable\n\n    def divideBad[F[_]](x: String, y: String)(implicit \n        F1: ApplicativeError[F, ArithmeticError],\n        F2: ApplicativeError[F, ParseError]): F[String] = \n        // using Functor / Applicative syntax here will cause an\n        // "ambiguous implicit values" error\n        ???\n')),(0,o.kt)("p",null,"So we are forced to choose a single unified error type."),(0,o.kt)("h3",{id:"solution"},"Solution"),(0,o.kt)("p",null,"The simplest solution here is to create a typeclass, that is not a subtype of Functor:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Raise[F[_], E]{\n  def raise[A](err: E): F[A]\n}\n")),(0,o.kt)("p",null,"(see also\ncats-mtl 's ",(0,o.kt)("a",{parentName:"p",href:"https://typelevel.org/cats-mtl/mtl-classes/functorraise.html"},(0,o.kt)("inlineCode",{parentName:"a"},"FunctorRaise")),")."),(0,o.kt)("p",null,"It would allow us to distinguish between different types of errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.IO\nimport tofu._\nimport tofu.syntax.monadic._\nimport tofu.syntax.raise._\n\ndef divide[F[_]: Monad](x: String, y: String)(implicit \n    F1: Raise[F, ArithmeticError],\n    F2: Raise[F, ParseError]\n    ): F[String] = \n    ( x.toIntOption.orRaise(ParseError()),\n      y.toIntOption.orRaise(ParseError())\n       .verified(_ != 0)(ArithmeticError())\n    ).mapN(_ / _).map(_.toString)\n\ndivide[IO]("10", "3").attempt.unsafeRunSync()\n\ndivide[IO]("10","0").attempt.unsafeRunSync()\n\ndivide[IO]("1", "0").attempt.unsafeRunSync()\n        \n')),(0,o.kt)("h2",{id:"recovering-from-errors"},"Recovering from errors"),(0,o.kt)("h3",{id:"problem-1"},"Problem"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"ApplicativeError")," provides the following method for error handling:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"  def handleErrorWith[A](fa: F[A])(f: E => F[A]): F[A]\n")),(0,o.kt)("p",null,"Here, if ",(0,o.kt)("inlineCode",{parentName:"p"},"f")," does not fail, ",(0,o.kt)("inlineCode",{parentName:"p"},"F[A]")," should describe a successful computation. The types, however, do not convey this fact,\nsince we have no type for ",(0,o.kt)("inlineCode",{parentName:"p"},"Unexeptional")," partner. Read more ",(0,o.kt)("a",{parentName:"p",href:"https://typelevel.org/blog/2018/04/13/rethinking-monaderror.html"},"here")),(0,o.kt)("h3",{id:"solution-1"},"Solution"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Tofu")," is shipped with a few typeclasses targeting the problem. The simplest one is"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait RestoreTo[F[_], G[_]] {\n  def restore[A](fa: F[A]): G[Option[A]]\n}\n")),(0,o.kt)("p",null,"which can be used to restore from any failure condition."),(0,o.kt)("p",null,"Another one is"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait HandleTo[F[_], G[_], E] extends RestoreTo[F, G] {\n  def handleWith[A](fa: F[A])(f: E => G[A]): G[A]\n\n  def handle[A](fa: F[A])(f: E => A)(implicit G: Applicative[G]): G[A] =\n    handleWith(fa)(e => G.pure(f(e)))\n\n  def attempt[A](fa: F[A])(implicit F: Functor[F], G: Applicative[G]): G[Either[E, A]] =\n    handle(F.map(fa)(_.asRight[E]))(_.asLeft)\n}\n")),(0,o.kt)("p",null,"which can handle concrete error type:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.EitherT\nimport cats.instances.vector._\nimport cats.syntax.foldable._\nimport cats.syntax.traverse._\nimport tofu._\nimport tofu.syntax.handle._\nimport tofu.syntax.monadic._\nimport tofu.syntax.raise._\n\ndef splitErrors[\n  T[_]: Traverse: Alternative, \n  F[_]: Functor, G[_]: Applicative, E, A](ls: T[F[A]])(\n    implicit errors: ErrorsTo[F, G, E]\n): G[(T[E], T[A])] =\n  ls.traverse(_.attemptTo[G, E]).map(_.partitionEither(identity))\n\ndef parseInt[F[_]: Applicative: Raise[*[_], String]](s: String): F[Int] =\n  s.toIntOption.orRaise(s"could not parse $s")\n\ntype Calc[A] = EitherT[Eval, String, A]\n\nsplitErrors[Vector, Calc, Eval, String, Int](\n  Vector("1", "hello", "2", "world", "3").map(parseInt[Calc])\n).value\n')),(0,o.kt)("p",null,"HandleTo, empowered with Raise, is called ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrorsTo"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait ErrorsTo[F[_], G[_], E] extends Raise[F, E] with HandleTo[F, G, E]\n")),(0,o.kt)("p",null,"There are also specialized versions of ",(0,o.kt)("inlineCode",{parentName:"p"},"RestoreTo"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"HandleTo")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ErrorsTo")," without ",(0,o.kt)("inlineCode",{parentName:"p"},"To"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Restore[F[_]] extends RestoreTo[F, F] {\n  def restoreWith[A](fa: F[A])(ra: => F[A]): F[A]\n}\n\ntrait Handle[F[_], E] extends HandleTo[F, F, E] with Restore[F] {\n\n  def tryHandleWith[A](fa: F[A])(f: E => Option[F[A]]): F[A]\n\n  def tryHandle[A](fa: F[A])(f: E => Option[A])(implicit F: Applicative[F]): F[A] =\n    tryHandleWith(fa)(e => f(e).map(F.pure))\n\n  def handleWith[A](fa: F[A])(f: E => F[A]): F[A] =\n    tryHandleWith(fa)(e => Some(f(e)))\n\n  def recoverWith[A](fa: F[A])(pf: PartialFunction[E, F[A]]): F[A] =\n    tryHandleWith(fa)(pf.lift)\n\n  def recover[A](fa: F[A])(pf: PartialFunction[E, A])(implicit F: Applicative[F]): F[A] =\n    tryHandle(fa)(pf.lift)\n\n  def restoreWith[A](fa: F[A])(ra: => F[A]): F[A] = handleWith(fa)(_ => ra)\n}\n\n\ntrait Errors[F[_], E] extends Raise[F, E] with Handle[F, E] with ErrorsTo[F, F, E]\n")))}f.isMDXComponent=!0}}]);