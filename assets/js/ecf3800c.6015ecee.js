"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1706],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=r,g=u["".concat(s,".").concat(m)]||u[m]||f[m]||o;return t?a.createElement(g,i(i({ref:n},p),{},{components:t})):a.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},8931:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var a=t(7462),r=t(3366),o=(t(7294),t(4137)),i=["components"],l={id:"agent",title:"Agent"},s=void 0,c={unversionedId:"agent",id:"agent",title:"Agent",description:"Agent: Reference with effectful mutators",source:"@site/../docs/agent.md",sourceDirName:".",slug:"/agent",permalink:"/docs/agent",draft:!1,tags:[],version:"current",lastUpdatedBy:"susliko",lastUpdatedAt:1589407182,formattedLastUpdatedAt:"May 13, 2020",frontMatter:{id:"agent",title:"Agent"},sidebar:"docs",previous:{title:"Cats MTL interop",permalink:"/docs/kernelcatsmtlinterop"},next:{title:"MakeRef",permalink:"/docs/concurrent-makeref"}},p={},u=[{value:"Agent: Reference with effectful mutators",id:"agent-reference-with-effectful-mutators",level:2},{value:"Creation",id:"creation",level:2},{value:"Examples",id:"examples",level:2},{value:"Using Agents:",id:"using-agents",level:3},{value:"Using MakeAgent:",id:"using-makeagent",level:3}],f={toc:u},m="wrapper";function g(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"agent-reference-with-effectful-mutators"},"Agent: Reference with effectful mutators"),(0,o.kt)("p",null," Agent is like cats-effect Ref but it allows effectful updates of referenced value.\nIt also allows enqueuing of mutations without waiting for their completion\nand mutation of values by filter(partial function). "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Agent[F[_], A] {\n\n  def get: F[A]\n\n  def updateM(f: A => F[A]): F[A]\n\n  def fireUpdateM(f: A => F[A]): F[Unit]\n\n  def modifyM[B](f: A => F[(B, A)]): F[B]\n\n  def updateSomeM(f: PartialFunction[A, F[A]]): F[A]\n\n  def modifySomeM[B](default: B)(f: PartialFunction[A, F[(B, A)]]): F[B]\n}\n")),(0,o.kt)("p",null," Agent's companion object contains default implementation\nthat can be built from cats-effect's Ref and Semaphore:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"object Agent {\n\n  final case class SemRef[F[_]: Monad: Fire, A](ref: Ref[F, A], sem: Semaphore[F]) extends Agent[F, A] {\n  // impl code...\n  }\n}\n")),(0,o.kt)("h2",{id:"creation"},"Creation"),(0,o.kt)("p",null," One can create Agent of some value with helper MakeAgent. "),(0,o.kt)("p",null," It allows different effects for creating and running Agent:  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait MakeAgent[I[_], F[_]] {\n\n  def agentOf[A](a: A): I[Agent[F, A]]\n}\n")),(0,o.kt)("p",null," MakeAgent has a companion object that offers easier creation of Agent instances.\nAgent could also be constructed from tofu.concurrent's MakeRef and MakeSemaphore implicit instances."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"object MakeAgent {\ndef apply[I[_], F[_]](implicit mkAgent: MakeAgent[I, F]): Applier[I, F] = // impl\n\n  implicit def byRefAndSemaphore[I[_]: FlatMap, F[_]: Monad: Fire](\n      implicit\n      refs: MakeRef[I, F],\n      sems: MakeSemaphore[I, F]\n  ) = // impl\n}\n")),(0,o.kt)("p",null," If you are using the same effect for creation and running\nyou can use Agents type alias defined in tofu.concurrent package object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"package tofu\n\npackage object concurrent {\n   // other aliases...\n   type Agents[F[_]] = MakeAgent[F, F]\n   // other aliases...\n}\n")),(0,o.kt)("h2",{id:"examples"},"Examples"),(0,o.kt)("h3",{id:"using-agents"},"Using Agents:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.Sync\nimport cats.implicits._\nimport cats.Monad\nimport cats.syntax.flatMap._\nimport tofu.common.Console\nimport tofu.concurrent.Agents\n \n  def example[F[_]: Agents: Sync: Monad: Console]: F[Unit] =\n       for {\n         _ <- Monad[F].unit\n         agent <- Agents[F].of(42)\n         newValue <- agent.updateM(a => Console[F].putStrLn(s"current value is $a") *> Monad[F].pure(a + 27))\n         _ <- Console[F].putStrLn(s"new value is $newValue") // new value is 69\n       } yield ()\n')),(0,o.kt)("h3",{id:"using-makeagent"},"Using MakeAgent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.effect.Sync\nimport cats.implicits._\nimport cats.Monad\nimport cats.syntax.flatMap._\nimport tofu.common.Console\nimport tofu.concurrent.{Agents, MakeAgent, MakeRef, MakeSemaphore, Refs, Semaphores}\nimport tofu.Fire\n\n def example[F[_]: Agents: Fire: Monad: Console: Sync: Refs: Semaphores](\n     implicit\n     refs: MakeRef[Option, F],\n     sems: MakeSemaphore[Option, F]\n ): F[Unit] =\n   for {\n     _        <- Monad[F].unit\n     agent    <- MakeAgent[Option, F].of(42).map(Monad[F].pure(_)).getOrElse(Agents[F].of(42))\n     newValue <- agent.updateM(a => Console[F].putStrLn(s"current value is $a") *> Monad[F].pure(a + 27))\n     _        <- Console[F].putStrLn(s"new value is $newValue") // new value is 69\n  } yield ()\n')))}g.isMDXComponent=!0}}]);