"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5579],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,m=p["".concat(s,".").concat(g)]||p[g]||d[g]||o;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=g;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},5155:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>u});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),l=["components"],i={id:"tofu.logging.key-features",title:"Key Features"},s="Simple logging for your services",c={unversionedId:"tofu.logging.key-features",id:"tofu.logging.key-features",title:"Key Features",description:"Key features",source:"@site/../docs/tofu.logging.key-features.md",sourceDirName:".",slug:"/tofu.logging.key-features",permalink:"/docs/tofu.logging.key-features",tags:[],version:"current",lastUpdatedBy:"\u0410\u043d\u0442\u043e\u043d \u0412\u043e\u0438\u0306\u0446\u0438\u0448\u0435\u0432\u0441\u043a\u0438\u0438\u0306",lastUpdatedAt:1631546433,formattedLastUpdatedAt:"9/13/2021",frontMatter:{id:"tofu.logging.key-features",title:"Key Features"},sidebar:"docs",previous:{title:"Core concepts",permalink:"/docs/tofu.logging.main.entities"},next:{title:"tofu.syntax.logging",permalink:"/docs/tofu.logging.syntax"}},u=[{value:"Key features",id:"key-features",children:[{value:"Supported for every popular style",id:"supported-for-every-popular-style",children:[],level:3},{value:"Concise syntax",id:"concise-syntax",children:[],level:3},{value:"Structured and controllable",id:"structured-and-controllable",children:[],level:3},{value:"Context support",id:"context-support",children:[],level:3}],level:2},{value:"What&#39;s next",id:"whats-next",children:[],level:2}],p={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"simple-logging-for-your-services"},"Simple logging for your services"),(0,o.kt)("h2",{id:"key-features"},"Key features"),(0,o.kt)("h3",{id:"supported-for-every-popular-style"},"Supported for every popular style"),(0,o.kt)("p",null,"You can use ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu.logging")," in any style you want:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tagless Final style;"),(0,o.kt)("li",{parentName:"ul"},"Simple ",(0,o.kt)("inlineCode",{parentName:"li"},"cats.effect.IO")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"(monix|zio).Task")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ReaderT"),";"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ZIO")," and ZLayers \u2014 with the help of dedicated module ",(0,o.kt)("inlineCode",{parentName:"li"},"tofu-zio-logging")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ZLogs"),";"),(0,o.kt)("li",{parentName:"ul"},"Even with ",(0,o.kt)("inlineCode",{parentName:"li"},"Future"),"s (although it's kinda in the past).")),(0,o.kt)("h3",{id:"concise-syntax"},"Concise syntax"),(0,o.kt)("p",null,"With the implicit instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging")," one can log messages with ease:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import tofu.logging._\nimport tofu.syntax.logging._\n\nval error = new Throwable("Oh no.")\n\ndef log[F[_] : Logging : Monad] = for {\n  _ <- info"Hi! I\'m logging"\n  _ <- warn"Hello again!"\n  _ <- error"It\'s me, error!"\n  _ <- errorCause"So sad, I\'ve got an error"(error)\n} yield ()\n')),(0,o.kt)("h3",{id:"structured-and-controllable"},"Structured and controllable"),(0,o.kt)("p",null,"You can easily put any necessary values into the structure of the log message with ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable"),"; also you can fully\ncontrol what is logged and what is not:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import derevo._\nimport tofu.logging._\n\n@derive(Loggable)\ncase class Payment(id: String, @hidden cardNumber: String, amount: Long)\n\ndef log[F[_] : Logging : Monad](payment: Payment) = info"Got payment $payment"\n')),(0,o.kt)("p",null,"Given that there's a defined ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")," instance for this context and provided logger is context aware (e.g. created\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"contextual")," method), every logged message will contain information about context, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Got payment payment",\n  "level": "INFO",\n  "payment": {\n    "id": "131234234",\n    "amount": 432\n  }\n}\n')),(0,o.kt)("p",null,"Note that card number is not present at all as it was ",(0,o.kt)("inlineCode",{parentName:"p"},"@hidden"),"."),(0,o.kt)("h3",{id:"context-support"},"Context support"),(0,o.kt)("p",null,"Let's say your effect type has some context \u2014 it could be trace id or some domain info:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import cats._\nimport cats.effect._\n\ncase class TraceId(id: Long)\n\ntype TracedIO[A] = ReaderT[TraceId, IO, A]\n")),(0,o.kt)("p",null,"tofu.logging can extract it and automatically add into the structure of every log message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'class MyService[F[_] : Logging] {\n  def sayHello: F[Unit] = info"Hello!"\n}\n\nval ioservice = new MyService[IO]\nval tracedService = new MyService[TracedIO]\n')),(0,o.kt)("p",null,"(",(0,o.kt)("em",{parentName:"p"},"Note the absence of anything related to context in MyService, logging doest it all itself."),")"),(0,o.kt)("p",null,"Now if we run ",(0,o.kt)("inlineCode",{parentName:"p"},"tracedService.sayHello")," the log message structure will contain the trace id:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hello!",\n  "level": "INFO",\n  "trace.id": 64534\n}\n')),(0,o.kt)("p",null,"and if we run ",(0,o.kt)("inlineCode",{parentName:"p"},"ioService.sayHello")," the message will be clean:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "message": "Hello!",\n  "level": "INFO"\n}\n')),(0,o.kt)("p",null,"More on that can be found on the dedicated ",(0,o.kt)("a",{parentName:"p",href:"/docs/tofu.logging.recipes.context"},"recipe page"),"."),(0,o.kt)("h2",{id:"whats-next"},"What's next"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can read about core concepts ",(0,o.kt)("a",{parentName:"li",href:"/docs/tofu.logging.main.entities"},"here")),(0,o.kt)("li",{parentName:"ul"},"You can see the recipes and discover what you need to use ",(0,o.kt)("inlineCode",{parentName:"li"},"logging")," ",(0,o.kt)("a",{parentName:"li",href:"/docs/tofu.logging.recipes"},"here"))))}d.isMDXComponent=!0}}]);