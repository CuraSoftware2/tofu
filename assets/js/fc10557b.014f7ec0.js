"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[730],{4137:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var g=t.createContext({}),s=function(e){var n=t.useContext(g),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(g.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,o=e.originalType,g=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=s(a),m=r,u=d["".concat(g,".").concat(m)]||d[m]||c[m]||o;return a?t.createElement(u,l(l({ref:n},p),{},{components:a})):t.createElement(u,l({ref:n},p))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var g in n)hasOwnProperty.call(n,g)&&(i[g]=n[g]);i.originalType=e,i[d]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},2256:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>g,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var t=a(7462),r=a(3366),o=(a(7294),a(4137)),l=["components"],i={id:"tofu.logging.loggable",title:"Loggable typeclass"},g=void 0,s={unversionedId:"tofu.logging.loggable",id:"tofu.logging.loggable",title:"Loggable typeclass",description:"To represent a value in logs we use a concept of Loggable (it's a typeclass). It describes how a value of some type",source:"@site/../docs/tofu.logging.loggable.md",sourceDirName:".",slug:"/tofu.logging.loggable",permalink:"/docs/tofu.logging.loggable",tags:[],version:"current",lastUpdatedBy:"Matt Kohl",lastUpdatedAt:1666373101,formattedLastUpdatedAt:"10/21/2022",frontMatter:{id:"tofu.logging.loggable",title:"Loggable typeclass"},sidebar:"docs",previous:{title:"tofu.syntax.logging",permalink:"/docs/tofu.logging.syntax"},next:{title:"Logback Layouts",permalink:"/docs/tofu.logging.layouts"}},p=[{value:"Loggable example",id:"loggable-example",children:[],level:3},{value:"Loggable derivation",id:"loggable-derivation",children:[{value:"Configuring Loggable generation",id:"configuring-loggable-generation",children:[],level:3}],level:2}],d={toc:p};function c(e){var n=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To represent a value in logs we use a concept of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")," (it's a typeclass). It describes how a value of some type\ncan be logged, both as a string representation in log message and as a component of structured logging. Given an\ninstance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")," for a type, a value of the type can be converted into the final internal representation\ncalled ",(0,o.kt)("inlineCode",{parentName:"p"},"LoggedValue")," and thus logged in a way that you provided.",(0,o.kt)("br",{parentName:"p"}),"\n","There are multiple predefined ways to create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable"),", many of them can be found\nin ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu.logging.Loggable")," object:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Loggable.empty")," for no-op logging of value"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Loggable.show")," for using ",(0,o.kt)("inlineCode",{parentName:"li"},"cats.Show")," instance as string representation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Loggable.either")," for logging either of ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"B")),(0,o.kt)("li",{parentName:"ul"},"provided instances for all primitive types, as well as stdlib's collections and collections from Cats"),(0,o.kt)("li",{parentName:"ul"},"java.time.* instances")),(0,o.kt)("p",null,"Of course, you can describe your ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")," instance yourself by extending existing traits that pre-implement some\nfunctionality:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DictLoggable")," for multi-field objects"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ToStringLoggable")," for using ",(0,o.kt)("inlineCode",{parentName:"li"},".toString")," for logging"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"HideLoggable")," to exclude value from logging")),(0,o.kt)("h3",{id:"loggable-example"},"Loggable example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},'import tofu.logging._\nimport cats.syntax.semigroup._\n\ncase class User(name: String, surname: String)\n\nimplicit val userLoggable = new DictLoggable[User] {\n  override def fields[I, V, R, S](a: User, i: I)(implicit r: LogRenderer[I, V, R, S]): R = {\n    r.addString("name", a.name, i) |+| r.addString("surname", a.surname, i)\n  }\n\n  override def logShow(a: User): String = s"name = ${a.name}, surname = ${a.surname}"\n}\n')),(0,o.kt)("p",null,"Let's take a look at this example.",(0,o.kt)("br",{parentName:"p"}),"\n","First, we define a loggable for our ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," class as a ",(0,o.kt)("inlineCode",{parentName:"p"},"DictLoggable")," which means that we want to log it as a multi-field\nobject with structure.",(0,o.kt)("br",{parentName:"p"}),"\n","Second, we define two methods that describe how ",(0,o.kt)("inlineCode",{parentName:"p"},"User")," should be logged:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"fields"),", that represents ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," as a structure, containing two fields with their respective names and values"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"logShow"),", that represents ",(0,o.kt)("inlineCode",{parentName:"li"},"User")," as a string in a log message")),(0,o.kt)("h2",{id:"loggable-derivation"},"Loggable derivation"),(0,o.kt)("p",null,"a\nTofu has integration with ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tofu-tf/derevo"},"derevo")," library. It allows you to easily generate\ninstances of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable[YourClass]")," for case classes or ADTs:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},"import tofu.logging.derivation.loggable\nimport derevo.derive\n\n@derive(loggable)\ncase class Query(value: String, size: Int, isTagged: Tagged, tag: Tag)\n\n@derive(loggable)\ncase class Tagged(b: Option[Boolean])\n\n@derive(loggable)\nsealed trait Tag\n\n@derive(loggable)\ncase class DatabaseTag(db: String) extends Tag\n\n@derive(loggable)\ncase object InMemoryTag extends Tag\n")),(0,o.kt)("p",null,"so when logged"),(0,o.kt)("h3",{id:"configuring-loggable-generation"},"Configuring Loggable generation"),(0,o.kt)("p",null,"Tofu has several annotations to configure generation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@hidden")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},"import tofu.logging.derivation.{loggable, hidden}\nimport derevo.derive\n\n@derive(loggable)\ncase class User(name: String, @hidden() password: String)\n\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'User("tofu", "pass")')," will be logged as ",(0,o.kt)("inlineCode",{parentName:"p"},"User{name=tofu}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@masked")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},"import tofu.logging.derivation.{loggable, masked, MaskMode}\nimport derevo.derive\n\n@derive(loggable)\ncase class Card(@masked(MaskMode.Erase) expirationDate: String, @masked(MaskMode.ForLength(4, 12)) cardNumber: String, @masked() owner: String)\n\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'Card(737, "1244345632322311", "TOFU PETROV")')," will be logged as ",(0,o.kt)("inlineCode",{parentName:"p"},"Card{expirationDate=...,cardNumber=1244########2311,owner=**** ******}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"@unembed")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},"import tofu.logging.derivation.{loggable, unembed}\nimport derevo.derive\n\n@derive(loggable)\ncase class Scientist(@unembed owner: Person, age: Option[Int])\n\n@derive(loggable)\ncase class Person(name: String)\n")),(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'Room(Person("Karl Sagan"), None)')," will be logged as ",(0,o.kt)("inlineCode",{parentName:"p"},"Room{name=Karl Sagan, age=None}")))))}c.isMDXComponent=!0}}]);