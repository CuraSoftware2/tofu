"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3913],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5773:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var o=n(7462),a=n(3366),r=(n(7294),n(4137)),i=["components"],s={id:"console",title:"Console"},l=void 0,p={unversionedId:"console",id:"console",title:"Console",description:"Installation",source:"@site/../docs/console.md",sourceDirName:".",slug:"/console",permalink:"/docs/console",draft:!1,tags:[],version:"current",lastUpdatedBy:"Rat King",lastUpdatedAt:1619684248,formattedLastUpdatedAt:"Apr 29, 2021",frontMatter:{id:"console",title:"Console"},sidebar:"docs",previous:{title:"Config",permalink:"/docs/config"},next:{title:"Memo",permalink:"/docs/memo"}},u={},c=[{value:"Installation",id:"installation",level:2},{value:"What if you need to keep things simple?",id:"what-if-you-need-to-keep-things-simple",level:2},{value:"Console",id:"console",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Show",id:"show",level:4},{value:"Puts",id:"puts",level:4}],d={toc:c},m="wrapper";function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,r.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,r.kt)("br",{parentName:"p"}),"\n","or as a standalone dependency\n",(0,r.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-core" % tofu-version'),"  "),(0,r.kt)("h2",{id:"what-if-you-need-to-keep-things-simple"},"What if you need to keep things simple?"),(0,r.kt)("p",null,"Let's say you're writing something simple and you need some of that good ol' console IO. Of course you can use plain ",(0,r.kt)("inlineCode",{parentName:"p"},"println")," but we are nice and pure here. It is way better to use ",(0,r.kt)("inlineCode",{parentName:"p"},"tofu.Console")," in such case."),(0,r.kt)("h3",{id:"console"},"Console"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Console[F]")," does three things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"lets you read from standard input in ",(0,r.kt)("inlineCode",{parentName:"li"},"F")),(0,r.kt)("li",{parentName:"ul"},"lets you write to standard output in ",(0,r.kt)("inlineCode",{parentName:"li"},"F")),(0,r.kt)("li",{parentName:"ul"},"lets you write to error output in ",(0,r.kt)("inlineCode",{parentName:"li"},"F"))),(0,r.kt)("p",null,"Let's demonstrate it with simple example.\nSuppose we are writing a subset of unix ",(0,r.kt)("inlineCode",{parentName:"p"},"cat")," program that can echo its input to output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect.{ExitCode, IO, IOApp}\nimport cats.FlatMap\nimport tofu.common.Console\nimport tofu.syntax.monadic._ //for flatMap\n\n\nobject catStraight extends IOApp {\n  override def run(args: List[String]): IO[ExitCode] = \n       catProgramStep[IO].foreverM\n\n  def catProgramStep[F[_] : FlatMap : Console]: F[Unit] = for {\n    input <- Console[F].readStrLn \n    _ <- Console[F].putStrLn(input) // or putStr if you don't like newlines\n  } yield ()\n}\n")),(0,r.kt)("p",null,"Where does the instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"Console[IO]")," comes from?\nThe answer is that for any type ",(0,r.kt)("inlineCode",{parentName:"p"},"F")," that has ",(0,r.kt)("inlineCode",{parentName:"p"},"Sync[F]")," instance of console comes for free by using standard scala console IO."),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"It's all cool but writing ",(0,r.kt)("inlineCode",{parentName:"p"},"Console[F]")," isn't cool. There is 'tofu.syntax.console' for a fancy functions to work with it.\nLet's make our cat program a little nicer by adding one import and removing duplicates."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import tofu.syntax.console._ //this one gets you all the goodies\n\nobject catWithSyntax extends IOApp {\n  override def run(args: List[String]): IO[ExitCode] =\n    catProgramStep[IO].foreverM\n\n  def catProgramStep[F[_]: FlatMap: Console]: F[Unit] = for {\n    input <- readStrLn\n    _ <- if (input != "dog")\n          putStrLn(input)\n        else\n          putErrLn("Do not scare the cat!")\n  } yield ()\n}\n')),(0,r.kt)("p",null,"So when ran it works like that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cat\n>cat\nkitten\n>kitten\ndog\n>Do not scare the cat! //written in red because of 'putErrLn'\n")),(0,r.kt)("h4",{id:"show"},"Show"),(0,r.kt)("p",null,"There are integrations with ",(0,r.kt)("inlineCode",{parentName:"p"},"cats.Show")," typeclass.\nLet's say we have some case class and a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"Show")," instance for it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.Show\n\ncase class Person(name: String)\nimplicit val personShow: Show[Person] = Show.show[Person](p => s"this person has name ${p.name}")\n')),(0,r.kt)("p",null,"You can use two methods to put a person to console"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'val cat: Person = Person("Cat")\n\nputToStringLn[IO](cat).unsafeRunSync() //uses .toString \nputShowLn[IO, Person](cat).unsafeRunSync() //uses Show from scope\n')),(0,r.kt)("h4",{id:"puts"},"Puts"),(0,r.kt)("p",null,"Also, it is possible to print a interpolated string in a nice way using ",(0,r.kt)("inlineCode",{parentName:"p"},'puts"..."'),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'def putCat[F[_]: Console]: F[Unit] = puts"$cat, not a Person"\nputCat[IO].unsafeRunSync()\n')),(0,r.kt)("p",null,"As you can see it uses ",(0,r.kt)("inlineCode",{parentName:"p"},"Show")," inside so you'd want to have instances for values inside ",(0,r.kt)("inlineCode",{parentName:"p"},"puts"),"-string.\nThe error message when you do not have ",(0,r.kt)("inlineCode",{parentName:"p"},"Show")," instance in scope look like that:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sbtshell"},'[error] ...: type mismatch\n[error]  found   : tofu.cat.Person\n[error]  required: cats.Show.Shown\n[error]   def putCat[F[_]: Console] = puts"$cat that is not a Person"\n[error]                                     ^\n')))}f.isMDXComponent=!0}}]);