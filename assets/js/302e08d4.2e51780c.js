"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7421],{4137:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||o;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2423:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>p,default:()=>f,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var a=n(7462),i=n(3366),o=(n(7294),n(4137)),r=["components"],l={id:"mid",title:"Mid"},p=void 0,s={unversionedId:"mid",id:"mid",title:"Mid",description:"Installation",source:"@site/../docs/mid.md",sourceDirName:".",slug:"/mid",permalink:"/docs/mid",draft:!1,tags:[],version:"current",lastUpdatedBy:"Andrey Golikov",lastUpdatedAt:1635777917,formattedLastUpdatedAt:"Nov 1, 2021",frontMatter:{id:"mid",title:"Mid"},sidebar:"docs",previous:{title:"MakeRef",permalink:"/docs/concurrent-makeref"},next:{title:"Tofu optics",permalink:"/docs/optics"}},u={},d=[{value:"Installation",id:"installation",level:2},{value:"Assumption",id:"assumption",level:2},{value:"Usage",id:"usage",level:2},{value:"Example",id:"example",level:2}],c={toc:d},m="wrapper";function f(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)(m,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,o.kt)("br",{parentName:"p"}),"\n","or as a standalone dependency:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-core-higher-kind" % tofu-version')," "),(0,o.kt)("h2",{id:"assumption"},"Assumption"),(0,o.kt)("p",null,"Consider some trait"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait MyBusinessModule[F[_]] {\n  def doBusinessThing(entity: Entity, info: Info): F[Value]\n  def undoBusinessThing(entity: Entity): F[Respect]\n}\n")),(0,o.kt)("p",null,"Often ",(0,o.kt)("inlineCode",{parentName:"p"},"F")," presented like some ",(0,o.kt)("inlineCode",{parentName:"p"},"IO"),", reader, or any transformer"),(0,o.kt)("p",null,"But signature doesn't oblige to be strict. Moreover, there is no necessity to use a functor"),(0,o.kt)("p",null,"Let's start with an example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"type Pre[F[_], A] = F[Unit]\n")),(0,o.kt)("p",null,"Despite ",(0,o.kt)("inlineCode",{parentName:"p"},"Pre")," has type-parameter ",(0,o.kt)("inlineCode",{parentName:"p"},"A"),", it doesn't put any information to the result"),(0,o.kt)("p",null,"Apply ",(0,o.kt)("inlineCode",{parentName:"p"},"MyBusinessModule[F[_]]")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Pre[F[_], *]")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait MyBusinessModule[Pre[F, *]] {\n  def doBusinessThing(entity: Entity, info: Info): F[Unit]\n  def undoBusinessThing(entity: Entity): F[Unit]\n}\n")),(0,o.kt)("p",null,"Only the effect is produced without any result. It could be logging, input validation, or something like that"),(0,o.kt)("p",null,"Now consider the following type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"type Post[F[_], A] = A => F[Unit]\n")),(0,o.kt)("p",null,"This is a contravariant type. The module takes the form"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait MyBusinessModule[Post[F, *]] {\n  def doBusinessThing(entity: Entity, info: Info): Value => F[Unit]\n  def undoBusinessThing(entity: Entity): Respect => F[Unit]\n}\n")),(0,o.kt)("p",null,"Such an implementation of a module can express logging or validation of a computation result"),(0,o.kt)("p",null,"Completes the next type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"type Mid[F[_], A] = F[A] => F[A]\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"Monad[F]")," both ",(0,o.kt)("inlineCode",{parentName:"p"},"Pre")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Post")," can be turned into ",(0,o.kt)("inlineCode",{parentName:"p"},"Mid")),(0,o.kt)("p",null,"Applying this to the module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait MyBusinessModule[Mid[F, *]] {\n  def doBusinessThing(entity: Entity, info: Info): F[Value] => F[Value]\n  def undoBusinessThing(entity: Entity): F[Respect] => F[Respect]\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mid")," provides capabilities of both ",(0,o.kt)("inlineCode",{parentName:"p"},"Pre")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Post"),", but also allows to run ",(0,o.kt)("inlineCode",{parentName:"p"},"F")," multiple times or not to run it at all."),(0,o.kt)("p",null,"Such middleware can be caching, retrying, or another logic, which is not implemented in infrastructure but requires additional reflection"),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("p",null,"It turns out that ",(0,o.kt)("a",{parentName:"p",href:"https://typelevel.org/cats-tagless/api/cats/tagless/ApplyK.html"},"ApplyK")," is enough. Via"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def map2K[F[_], G[_], H[_]](af: A[F], ag: A[G])(f: Tuple2K[F, G, *]~> H]): A[H]\n")),(0,o.kt)("p",null,"It makes it possible to compose the result of the main computation and the result of a plug-in computation. Hence, we can also compose the main module implementation and pluggable one"),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"map2K")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"F = F, G = Mid[F, *], H = F"),", then substituting ",(0,o.kt)("inlineCode",{parentName:"p"},"MyBusinessModule[F]")," and plugin ",(0,o.kt)("inlineCode",{parentName:"p"},"MyBusinessModule[Mid]"),"\nas ",(0,o.kt)("inlineCode",{parentName:"p"},"af")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"ag"),", only remains to implement ",(0,o.kt)("inlineCode",{parentName:"p"},"Tuple2K[F, G, *]~> H]")," i.e. the polymorphic function ",(0,o.kt)("inlineCode",{parentName:"p"},"[A] (F[A], F[A] => F[A]) => F[A]")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"(fa, f) => f(fa)")),(0,o.kt)("p",null,"So plugin application is just the process of applying the function to the result of every method. The macro generating ",(0,o.kt)("inlineCode",{parentName:"p"},"ApplyK[MyBusinessModule]")," will do the rest of all"),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"Example ",(0,o.kt)("inlineCode",{parentName:"p"},"representableK")," can be found in the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tofu-tf/tofu/blob/master/examples/src/main/scala/tofu/example/doobie/TofuDoobieExample.scala"},"source")),(0,o.kt)("p",null,"Example ",(0,o.kt)("inlineCode",{parentName:"p"},"applyK")," for authorship of ",(0,o.kt)("a",{parentName:"p",href:"https://t.me/ppressives"},"https://t.me/ppressives")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.{Applicative, FlatMap, Monad}\nimport cats.syntax.semigroup._\nimport derevo.derive\nimport derevo.tagless.applyK\nimport tofu.higherKind.Mid\nimport tofu.syntax.monadic._\n\ntrait Metrics[F[_]] {\n  def timed[A](metricsKey: String)(f: F[A]): F[A]\n}\n\ntrait Logger[F[_]] {\n  def info(str: String): F[Unit]\n}\n\n@derive(applyK)\ntrait FooService[F[_]] {\n  def foo(a: String): F[Int]\n}\n\nobject FooService {\n  def create[F[_] : Monad](metrics: Metrics[F], logger: Logger[F]): FooService[F] = {\n    val mid = (new FooLogging(logger): FooService[Mid[F, *]]) |+| (new FooMetrics(metrics): FooService[Mid[F, *]])\n    mid attach new FooImpl[F]\n  }\n\n  private final class FooImpl[F[_]: Applicative] extends FooService[F] {\n    def foo(a: String): F[Int] = a.length.pure[F]\n  }\n\n  private final class FooLogging[F[_]: FlatMap](logger: Logger[F]) extends FooService[Mid[F, *]] {\n    def foo(a: String): Mid[F, Int] =\n      d => logger.info(s"Calling foo with a=$a") *> d.flatTap(res => logger.info(s"foo returned $res"))\n  }\n\n  private final class FooMetrics[F[_]](metrics: Metrics[F]) extends FooService[Mid[F, *]] {\n    def foo(a: String): Mid[F, Int] = metrics.timed("timings.foo")(_)\n  }\n}\n')))}f.isMDXComponent=!0}}]);