"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8791],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),g=s(n),f=i,m=g["".concat(l,".").concat(f)]||g[f]||u[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[g]="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},8709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>c,metadata:()=>s,toc:()=>g});var r=n(7462),i=n(3366),o=(n(7294),n(4137)),a=["components"],c={id:"tofu.logging.recipes.service",title:"Logs for a service"},l=void 0,s={unversionedId:"tofu.logging.recipes.service",id:"tofu.logging.recipes.service",title:"Logs for a service",description:"Service logging",source:"@site/../docs/tofu.logging.recipes.service.md",sourceDirName:".",slug:"/tofu.logging.recipes.service",permalink:"/docs/tofu.logging.recipes.service",draft:!1,tags:[],version:"current",lastUpdatedBy:"\u0410\u043d\u0442\u043e\u043d \u0412\u043e\u0438\u0306\u0446\u0438\u0448\u0435\u0432\u0441\u043a\u0438\u0438\u0306",lastUpdatedAt:1631546433,formattedLastUpdatedAt:"Sep 13, 2021",frontMatter:{id:"tofu.logging.recipes.service",title:"Logs for a service"},sidebar:"docs",previous:{title:"The simplest form",permalink:"/docs/tofu.logging.recipes.simple"},next:{title:"Contextual Logging",permalink:"/docs/tofu.logging.recipes.context"}},p={},g=[{value:"Service logging",id:"service-logging",level:2}],u={toc:g},f="wrapper";function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)(f,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"service-logging"},"Service logging"),(0,o.kt)("p",null,"One downside of a ",(0,o.kt)("a",{parentName:"p",href:"/docs/tofu.logging.recipes.simple"},"simple logging")," is that in every service class you have to write this line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"private implicit val logging: Logging[F] = Logging.Make[F].forService[MyService[F]]\n")),(0,o.kt)("p",null,"It is quite boilerplate-ish, so ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu.logging")," has the workaround:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'class MyService[F[_] : Monad : MyService.Log](someDependency: DependencyService) {\n\n  def makeThis: F[Unit] = someDependency.foo(30) >> info"Something"\n\n  def makeThat: F[Unit] = someDependency.foo(30).flatTap(result => warn"Some another thing $result")\n}\n\nobject MyService extends LoggingCompanion[MyService]\n\n')),(0,o.kt)("p",null,"The line ",(0,o.kt)("inlineCode",{parentName:"p"},"object MyService extends LoggingCompanion[MyService]")," mixes in type Log to the companion, which is just alias\nfor ",(0,o.kt)("a",{parentName:"p",href:"/docs/tofu.logging.main.entities#logging"},(0,o.kt)("inlineCode",{parentName:"a"},"ServiceLogging[F, MyService]")),"."),(0,o.kt)("p",null,"This type carries information about which class it is supposed to be used for, so Scala compiler is able to implicitly\ncreate from Logs and pass desired ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceLogging")," instance."),(0,o.kt)("p",null,"And in the wiring of the app, just as in ",(0,o.kt)("a",{parentName:"p",href:"/docs/tofu.logging.recipes.simple"},"simple logging"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import cats.effect.ExitCode\n\ndef run: IO[ExitCode] = {\n  implicit val logs: Logging.Make[IO] = Logging.Make.plain[IO] // or Make.contextual[IO, C]\n\n  val service = new MyService[IO](???)\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"MyService.Log")," instance is created implicitly just for this service from the implicit value of ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging.Make"),"."))}m.isMDXComponent=!0}}]);