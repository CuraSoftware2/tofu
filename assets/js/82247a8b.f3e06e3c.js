"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2026],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},f="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=p(t),m=r,d=f["".concat(s,".").concat(m)]||f[m]||u[m]||o;return t?a.createElement(d,i(i({ref:n},c),{},{components:t})):a.createElement(d,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>p,toc:()=>f});var a=t(7462),r=t(3366),o=(t(7294),t(4137)),i=["components"],l={id:"config",title:"Config"},s=void 0,p={unversionedId:"config",id:"config",title:"Config",description:"Installation",source:"@site/../docs/config.md",sourceDirName:".",slug:"/config",permalink:"/docs/config",draft:!1,tags:[],version:"current",lastUpdatedBy:"Rat King",lastUpdatedAt:1619684248,formattedLastUpdatedAt:"Apr 29, 2021",frontMatter:{id:"config",title:"Config"},sidebar:"docs",previous:{title:"Tofu optics",permalink:"/docs/optics"},next:{title:"Console",permalink:"/docs/console"}},c={},f=[{value:"Installation",id:"installation",level:2},{value:"Features",id:"features",level:2},{value:"Example",id:"example",level:2},{value:"Abstractions",id:"abstractions",level:2},{value:"Configurable",id:"configurable",level:3},{value:"ParallelReader",id:"parallelreader",level:3},{value:"Custom types",id:"custom-types",level:2},{value:"Custom config sources",id:"custom-config-sources",level:2}],u={toc:f},m="wrapper";function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)(m,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,o.kt)("br",{parentName:"p"}),"\n","or as a standalone dependency:",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-config" % tofu-version'),"  "),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tofu-config")," is a boilerplate-free way to load configuration files as Scala classes,\nwhich provides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"parallel error accumulation, which won't give up parsing upon the first error;"),(0,o.kt)("li",{parentName:"ul"},"out-of-the box support for case classes and sealed hierarchies through ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/propensive/magnolia"},(0,o.kt)("inlineCode",{parentName:"a"},"Magnolia"))," derivation,\nsugared with ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/tofu-tf/derevo"},(0,o.kt)("inlineCode",{parentName:"a"},"Derevo"))," macro-annotations;"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/lightbend/config"},(0,o.kt)("inlineCode",{parentName:"a"},"Typesafe Config"))," interoperability;"),(0,o.kt)("li",{parentName:"ul"},"ease of integration with custom configuration sources and types.")),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("p",null,"A simple groceries config:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  "dairy": {\n    "storeName": "Milkman\'s dream",\n    "toBuy": ["eggs", "milk"]\n  },\n  "beverages": {\n    "storeName": "Teaworld",\n    "toBuy": [{\n      "teaSort": "Pu\'erh",\n    }, {\n      "coffeeSort": "Liberica"\n    }]\n  }\n}\n')),(0,o.kt)("p",null,"might be parsed into the following structure:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats.syntax.show._\nimport com.typesafe.config.ConfigFactory\nimport derevo.derive\nimport tofu.config.typesafe._\n\nsealed trait Item\n\nsealed trait Dairy extends Item\ncase object eggs extends Dairy\ncase object milk extends Dairy\n\nsealed trait Beverage extends Item\ncase class Tea(teaSort: String) extends Beverage\ncase class Coffee(coffeeSort: String) extends Beverage\n\ncase class ItemStore[I <: Item](\n  storeName: String,\n  toBuy: List[I]\n)\n\n@derive(Configurable) \ncase class Groceries(\n  dairy: ItemStore[Dairy],\n  beverages: ItemStore[Beverage]\n)\n\nval cfg = ConfigFactory.parseResources("groceries.conf")\nsyncParseConfig[Groceries](cfg) match {\n  case Left(errors)     => errors.foreach(err => println(err.show))\n  case Right(groceries) => println(groceries)\n}\n')),(0,o.kt)("p",null,'If we make a couple of errors in the config file, misspelling "eggs" and introducing beer type into beverages:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hocon"},'{\n  "dairy": {\n    "storeName": "Milkman\'s dream",\n    "toBuy": ["egs", "milk"]\n  },\n  "beverages": {\n    "storeName": "Teaworld",\n    "toBuy": [{\n      "teaSort": "Pu\'erh",\n    }, {\n      "coffeeSort": "Liberica"\n    }, {\n      "beerSort": "Sour"\n    }]\n  }\n}\n')),(0,o.kt)("p",null,"we will encounter verbose parsing errors:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"dairy.toBuy.[0] : bad string 'egs' : expected one of: eggs,milk\nbeverages.toBuy.[2] : no variant found\n")),(0,o.kt)("h2",{id:"abstractions"},"Abstractions"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tofu-config")," comes with a couple of neat abstractions over config parsing. "),(0,o.kt)("h3",{id:"configurable"},"Configurable"),(0,o.kt)("p",null,"The typeclass, which defines the property of a specific type to be parsed from a config is called\n",(0,o.kt)("inlineCode",{parentName:"p"},"Configurable")," (the definition is simplified):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Configurable[A] { \n  def apply[F[_]](cfg: ConfigItem[F]): F[A]\n}\n")),(0,o.kt)("p",null,"where ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigItem")," is a set of possible types of config elements (analog of ",(0,o.kt)("inlineCode",{parentName:"p"},"com.typesafe.ConfigValue"),")."),(0,o.kt)("h3",{id:"parallelreader"},"ParallelReader"),(0,o.kt)("p",null,"The context bound which is essential for config parsing is ",(0,o.kt)("inlineCode",{parentName:"p"},"ParallelReader"),". It is defined as a wrapper for ",(0,o.kt)("inlineCode",{parentName:"p"},"cats.Parallel"),"\nand inferred from it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"final case class ParallelReader[F[_]](paralleled: Parallel[ConfigT[F, *]])\n")),(0,o.kt)("p",null,"For a config to be parsed into a value of type ",(0,o.kt)("inlineCode",{parentName:"p"},"A")," in the context of ",(0,o.kt)("inlineCode",{parentName:"p"},"F"),", the following instances should be provided:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"def parseCfg[F[_]: Refs: MonadThrow: ParallelReader, \n                A: Configurable](cfg: Config): F[A]\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MonadThrow")," is for raising parsing errors.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"ParallelReader")," is for parallel parsing.",(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"Refs")," is for storing errors list inside a ",(0,o.kt)("inlineCode",{parentName:"p"},"Ref"),"."),(0,o.kt)("h2",{id:"custom-types"},"Custom types"),(0,o.kt)("p",null,"Sometimes one needs to define custom ways to parse values from a config.\nFor example, we might want to provide a convenient syntax for request limits:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "endpointA": "10 per 1 second",\n  "endpointB": "1000 per 1 hour"\n}\n')),(0,o.kt)("p",null,"It can be done via a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"Configurable")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.typesafe.config.ConfigFactory\nimport derevo.derive\nimport tofu.config.ConfigError.BadString\nimport tofu.config.typesafe._\nimport tofu.syntax.raise._\n\nimport scala.concurrent.duration.{Duration, FiniteDuration}\nimport scala.util.Try\n\ncase class Limit(count: Int, duration: FiniteDuration)\n\nval limitRegexp = "(\\\\d+) per ([0-9a-z ]+)".r\n\ndef fromString(string: String): Option[Limit] = string match {\n  case limitRegexp(count, duration) =>\n    Try(Limit(count.toInt, \n              FiniteDuration(Duration(duration).toSeconds, "seconds"))).toOption\n  case _ => None\n}\n\nimplicit val rateConfigurable: Configurable[Limit] =\n  Configurable.stringConfigurable.flatMake { F => str =>\n    fromString(str).orRaise(BadString(str, "Invalid limit rate"))(F.config, F.monad)\n}\n\n@derive(Configurable)\ncase class Limits(endpointA: Limit, endpointB: Limit)\n\nprintln(syncParseConfig[Limits](ConfigFactory.parseResources("limits.conf")))\n')),(0,o.kt)("h2",{id:"custom-config-sources"},"Custom config sources"),(0,o.kt)("p",null,"In order to provide a way to parse config from a custom source, one needs to provide a\nmapping from that source's types into ",(0,o.kt)("inlineCode",{parentName:"p"},"tofu.config.ConfigItem"),".\nFor an example, please refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/tofu-tf/tofu/blob/master/config/src/main/scala/tofu/config/typesafe.scala#L21"},(0,o.kt)("inlineCode",{parentName:"a"},"typesafe integration")),"."))}d.isMDXComponent=!0}}]);