"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8406],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var g=a.createContext({}),s=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(g.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,g=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),u=i,m=p["".concat(g,".").concat(u)]||p[u]||d[u]||o;return t?a.createElement(m,r(r({ref:n},c),{},{components:t})):a.createElement(m,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=t[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8630:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>g,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(7462),i=t(3366),o=(t(7294),t(4137)),r=["components"],l={id:"tofu.logging.main.entities",title:"Core concepts"},g="tofu.logging core concepts",s={unversionedId:"tofu.logging.main.entities",id:"tofu.logging.main.entities",title:"Core concepts",description:"tofu.logging consists of three main things:",source:"@site/../docs/tofu.logging.main.entities.md",sourceDirName:".",slug:"/tofu.logging.main.entities",permalink:"/docs/tofu.logging.main.entities",tags:[],version:"current",lastUpdatedBy:"\u0410\u043d\u0442\u043e\u043d \u0412\u043e\u0438\u0306\u0446\u0438\u0448\u0435\u0432\u0441\u043a\u0438\u0438\u0306",lastUpdatedAt:1631546433,formattedLastUpdatedAt:"9/13/2021",frontMatter:{id:"tofu.logging.main.entities",title:"Core concepts"},sidebar:"docs",previous:{title:"Home (Start here)",permalink:"/docs/tofu.logging.home"},next:{title:"Key Features",permalink:"/docs/tofu.logging.key-features"}},c=[{value:"Typeclass <code>Loggable[A]</code>",id:"typeclass-loggablea",children:[],level:2},{value:"Derivation",id:"derivation",children:[{value:"Configured derivation",id:"configured-derivation",children:[],level:3}],level:2},{value:"Logging",id:"logging",children:[],level:2},{value:"Logs",id:"logs",children:[{value:"Logging.Make",id:"loggingmake",children:[],level:3}],level:2}],p={toc:c};function d(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tofulogging-core-concepts"},"tofu.logging core concepts"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"tofu.logging")," consists of three main things:"),(0,o.kt)("h2",{id:"typeclass-loggablea"},"Typeclass ",(0,o.kt)("inlineCode",{parentName:"h2"},"Loggable[A]")),(0,o.kt)("p",null,"This is a type class that describes how an arbitrary instance of type A should be presented in the log messages."),(0,o.kt)("h2",{id:"derivation"},"Derivation"),(0,o.kt)("p",null,"Loggable instances could be derived automatically using ",(0,o.kt)("inlineCode",{parentName:"p"},"derevo"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import tofu.logging.derivation._\nimport derevo.derive\n\n@derive(loggable)\ncase class Data(id: Long, weight: Int, name: String)\n\n")),(0,o.kt)("p",null,"This annotation puts the instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Loggable[Data]")," into the (generated if not present) companion object ",(0,o.kt)("inlineCode",{parentName:"p"},"Data"),". When\nthe message is logged, the fields of ",(0,o.kt)("inlineCode",{parentName:"p"},"Data")," will be put into the result (e.g. JSON)."),(0,o.kt)("h3",{id:"configured-derivation"},"Configured derivation"),(0,o.kt)("p",null,"This derivation can be configured with annotations ",(0,o.kt)("inlineCode",{parentName:"p"},"hidden"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"masked")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"unembed"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"import tofu.logging.derivation._\nimport derevo.derive\n\n@derive(loggable)\ncase class ClientData(name: String, surname: String)\n\n@derive(loggable)\ncase class Payment(id: Long, @masked(MaskMode.Erase) cardNumber: String, @unembed name: ClientData)\n\n")),(0,o.kt)("p",null,"A message ",(0,o.kt)("inlineCode",{parentName:"p"},'info"This is $payment"')," would look like that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "@timestamp": "2021-08-20T17:13:39.787Z",\n  "loggerName": "some-logger",\n  "threadName": "ioapp-compute-0",\n  "level": "INFO",\n  "message": "This is Payment: Payment{id=3234,cardNumber=...,name=ClientData{name=foo,surname=bar}}",\n  "id": 3234,\n  "cardNumber": "...",\n  "name": "foo",\n  "surname": "bar"\n}\n')),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Logging[F]")," is a trait that describes logging capabilities of ",(0,o.kt)("inlineCode",{parentName:"p"},"F"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Logging[F[_]] {\n  def info(message: String, values: LoggedValue*): F[Unit]\n  //...\n}\n\n")),(0,o.kt)("p",null,"It has a tagged version ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceLogging[F, Service]")," which can be used for some ",(0,o.kt)("inlineCode",{parentName:"p"},"Service")," and carry this information on\nthe typelevel."),(0,o.kt)("h2",{id:"logs"},"Logs"),(0,o.kt)("p",null,"Trait ",(0,o.kt)("inlineCode",{parentName:"p"},"Logs[I, F]")," is a factory of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging[F]")," instances which decides how created Logging will behave."),(0,o.kt)("p",null,"As the creation of arbitrary logging instance could potentially have some side effects, operations of this trait are\neffectual:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"trait Logs[I[_], F[_]] {\n  def byName(name: String): I[Logging[F]]\n\n  def forService[Svc]: I[Logging[F]]\n  //...\n}\n\n")),(0,o.kt)("p",null,"The name method parameter (or type tag for ",(0,o.kt)("inlineCode",{parentName:"p"},"Svc")," type parameter) is used in the underlying logger and then displayed in\nthe log messages."),(0,o.kt)("h3",{id:"loggingmake"},"Logging.Make"),(0,o.kt)("p",null,"Nevertheless, some Logging instances can be created safely with no side effects, so one could use ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging.Make"),"\nwhich creates plain ",(0,o.kt)("inlineCode",{parentName:"p"},"Logging[F]"),". It uses the default backend by ",(0,o.kt)("inlineCode",{parentName:"p"},"Slf4j")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Delay")," typeclass."))}d.isMDXComponent=!0}}]);