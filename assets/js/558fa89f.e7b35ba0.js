"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[364],{4137:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var c=a.createContext({}),l=function(t){var e=a.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=l(t.components);return a.createElement(c.Provider,{value:e},t.children)},d="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,c=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),d=l(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(f,i(i({ref:e},p),{},{components:n})):a.createElement(f,i({ref:e},p))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=u;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=t,s[d]="string"==typeof t?t:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9906:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var a=n(7462),r=n(3366),o=(n(7294),n(4137)),i=["components"],s={id:"withcontext",title:"WithContext"},c=void 0,l={unversionedId:"withcontext",id:"withcontext",title:"WithContext",description:"Installation",source:"@site/../docs/withcontext.md",sourceDirName:".",slug:"/withcontext",permalink:"/docs/withcontext",draft:!1,tags:[],version:"current",lastUpdatedBy:"Ivan Aristov",lastUpdatedAt:1631705982,formattedLastUpdatedAt:"Sep 15, 2021",frontMatter:{id:"withcontext",title:"WithContext"},sidebar:"docs",previous:{title:"Env",permalink:"/docs/env"},next:{title:"Cats MTL interop",permalink:"/docs/kernelcatsmtlinterop"}},p={},d=[{value:"Installation",id:"installation",level:2},{value:"What if you don&#39;t need Env",id:"what-if-you-dont-need-env",level:2},{value:"Usage example and a short use case description",id:"usage-example-and-a-short-use-case-description",level:3}],m={toc:d},u="wrapper";function f(t){var e=t.components,n=(0,r.Z)(t,i);return(0,o.kt)(u,(0,a.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu" % tofu-version'),(0,o.kt)("br",{parentName:"p"}),"\n","or as a standalone dependency\n",(0,o.kt)("inlineCode",{parentName:"p"},'"tf.tofu" %% "tofu-core-*" % tofu-version'),"\n(replace suffix ",(0,o.kt)("inlineCode",{parentName:"p"},"*")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"ce2")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ce3")," depends on which cats-effect version you use)"),(0,o.kt)("h2",{id:"what-if-you-dont-need-env"},"What if you don't need Env"),(0,o.kt)("p",null,"Env is a powerful monad, but what if you're sure that you don't need it?\nYou can still use convenient Tofu concepts to work with your own Environment (",(0,o.kt)("inlineCode",{parentName:"p"},"WithContext"),").  "),(0,o.kt)("h3",{id:"usage-example-and-a-short-use-case-description"},"Usage example and a short use case description"),(0,o.kt)("p",null,"The short story long, it is possible to use ",(0,o.kt)("inlineCode",{parentName:"p"},"ReaderT"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import cats._\nimport cats.data.ReaderT\nimport cats.instances.option._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores some User\ncase class User(id: Int, name: String)\ncase class MyEnv(user: User)\n\n// defining an extractor, extractor is a common lens that you can read about\n// in a paragraph about lenses\nimplicit val extractor: Extract[MyEnv, User] = _.user\n      \ndef program[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] = \n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\n// ~voil\xe0\nprogram[ReaderT[Option, MyEnv, *]].run(MyEnv(User(0, "Tofu"))) //> Some(Tofu): Option[String]\n\n')),(0,o.kt)("p",null,"A bit more complicated example, that shows lenses usage only in the functions that require them:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.data.ReaderT\nimport cats.instances.option._\nimport cats.syntax.apply._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores a User and some related Metadata\ncase class User(id: Int, name: String)\ncase class Metadata(height: Double, age: Int)\ncase class MyEnv(user: User, md: Metadata)\n\n// defining extractors\nimplicit val userExtractor: Extract[MyEnv, User]   = _.user\nimplicit val mdExtractor: Extract[MyEnv, Metadata] = _.md\n\n// it is possible to define a program that only has a context\ndef program[F[_]: Apply: WithContext[*[_], MyEnv]]: F[String] = \n  (name[F], age[F]).mapN { (name, age) => s"$name: $age" }\n\n// but all the functions that were called inside a program\n// have on demand and only necessary extractors\ndef name[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] = \n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\ndef age[F[_]: WithContext[*[_], MyEnv]](implicit m: MyEnv Extract Metadata): F[Int] = \n  WithContext[F, MyEnv].extract(m).ask(_.age)\n\n// ~voil\xe0\nprogram[ReaderT[Option, MyEnv, *]]\n  .run(MyEnv(User(0, "Tofu"), Metadata(60, 18))) //> Some(Tofu: 18): Option[String]\n')),(0,o.kt)("p",null,"It is also possible to do define some ",(0,o.kt)("inlineCode",{parentName:"p"},"WithContext")," explicitly without having a need in ",(0,o.kt)("inlineCode",{parentName:"p"},"Env")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ReaderT")," monads:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala:reset"},'import cats._\nimport cats.instances.option._\nimport cats.syntax.apply._\nimport tofu._\nimport tofu.optics._\n\n// defining our own Env that stores a User and some related Metadata\ncase class User(id: Int, name: String)\ncase class Metadata(height: Double, age: Int)\ncase class MyEnv(user: User, md: Metadata)\n\n// defining extractors\nimplicit val userExtractor: Extract[MyEnv, User]   = _.user\nimplicit val mdExtractor: Extract[MyEnv, Metadata] = _.md\n\n// what if we don\'t need or don\'t know what ReaderT is\n// we can define a const Context than\nimplicit val ctx: WithContext[Option, MyEnv] =\n  WithContext.const[Option, MyEnv](MyEnv(User(0, "Tofu"), Metadata(60, 18)))\n\n// it is still possible to define a program that only has a context\ndef program[F[_]: Apply: WithContext[*[_], MyEnv]]: F[String] =\n  (name[F], age[F]).mapN { (name, age) => s"$name: $age" }\n\n// and all the functions that were called inside a program\n// have on demand and only necessary extractors\ndef name[F[_]: WithContext[*[_], MyEnv]](implicit u: MyEnv Extract User): F[String] =\n  WithContext[F, MyEnv].extract(u).ask(_.name)\n\ndef age[F[_]: WithContext[*[_], MyEnv]](implicit m: MyEnv Extract Metadata): F[Int] =\n  WithContext[F, MyEnv].extract(m).ask(_.age)\n\n// ~voil\xe0\nprogram[Option] //> Some(Tofu: 18): Option[String]\n')))}f.isMDXComponent=!0}}]);